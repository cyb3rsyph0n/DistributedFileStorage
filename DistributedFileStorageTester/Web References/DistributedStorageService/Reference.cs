//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace DistributedFileStorageTester.DistributedStorageService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DistributedStorageSoap", Namespace="http://tempuri.org/")]
    public partial class DistributedStorage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetStorageLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStorageLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginPutFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndPutFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AbortPutFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginGetFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndGetFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirectoryListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileListingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DistributedStorage() {
            this.Url = global::DistributedFileStorageTester.Properties.Settings.Default.DistributedFileStorageTester_DistributedStorageService_DistributedStorage;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetStorageLocationsCompletedEventHandler GetStorageLocationsCompleted;
        
        /// <remarks/>
        public event UpdateStorageLocationsCompletedEventHandler UpdateStorageLocationsCompleted;
        
        /// <remarks/>
        public event PutFileCompletedEventHandler PutFileCompleted;
        
        /// <remarks/>
        public event BeginPutFileChunkCompletedEventHandler BeginPutFileChunkCompleted;
        
        /// <remarks/>
        public event PutFileChunkCompletedEventHandler PutFileChunkCompleted;
        
        /// <remarks/>
        public event EndPutFileChunkCompletedEventHandler EndPutFileChunkCompleted;
        
        /// <remarks/>
        public event AbortPutFileChunkCompletedEventHandler AbortPutFileChunkCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event BeginGetFileChunkCompletedEventHandler BeginGetFileChunkCompleted;
        
        /// <remarks/>
        public event GetFileChunkCompletedEventHandler GetFileChunkCompleted;
        
        /// <remarks/>
        public event EndGetFileChunkCompletedEventHandler EndGetFileChunkCompleted;
        
        /// <remarks/>
        public event GetDirectoryListingCompletedEventHandler GetDirectoryListingCompleted;
        
        /// <remarks/>
        public event GetFileListingCompletedEventHandler GetFileListingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStorageLocations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStorageLocations() {
            object[] results = this.Invoke("GetStorageLocations", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStorageLocationsAsync() {
            this.GetStorageLocationsAsync(null);
        }
        
        /// <remarks/>
        public void GetStorageLocationsAsync(object userState) {
            if ((this.GetStorageLocationsOperationCompleted == null)) {
                this.GetStorageLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageLocationsOperationCompleted);
            }
            this.InvokeAsync("GetStorageLocations", new object[0], this.GetStorageLocationsOperationCompleted, userState);
        }
        
        private void OnGetStorageLocationsOperationCompleted(object arg) {
            if ((this.GetStorageLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageLocationsCompleted(this, new GetStorageLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStorageLocations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateStorageLocations([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] RemoteStorageLocation[] newLocations) {
            object[] results = this.Invoke("UpdateStorageLocations", new object[] {
                        newLocations});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStorageLocationsAsync(RemoteStorageLocation[] newLocations) {
            this.UpdateStorageLocationsAsync(newLocations, null);
        }
        
        /// <remarks/>
        public void UpdateStorageLocationsAsync(RemoteStorageLocation[] newLocations, object userState) {
            if ((this.UpdateStorageLocationsOperationCompleted == null)) {
                this.UpdateStorageLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStorageLocationsOperationCompleted);
            }
            this.InvokeAsync("UpdateStorageLocations", new object[] {
                        newLocations}, this.UpdateStorageLocationsOperationCompleted, userState);
        }
        
        private void OnUpdateStorageLocationsOperationCompleted(object arg) {
            if ((this.UpdateStorageLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStorageLocationsCompleted(this, new UpdateStorageLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PutFile(string folder, string fileName, int replicateCount, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileData, bool overWrite, ExtraInfo[] extraInfo) {
            object[] results = this.Invoke("PutFile", new object[] {
                        folder,
                        fileName,
                        replicateCount,
                        fileData,
                        overWrite,
                        extraInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PutFileAsync(string folder, string fileName, int replicateCount, byte[] fileData, bool overWrite, ExtraInfo[] extraInfo) {
            this.PutFileAsync(folder, fileName, replicateCount, fileData, overWrite, extraInfo, null);
        }
        
        /// <remarks/>
        public void PutFileAsync(string folder, string fileName, int replicateCount, byte[] fileData, bool overWrite, ExtraInfo[] extraInfo, object userState) {
            if ((this.PutFileOperationCompleted == null)) {
                this.PutFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileOperationCompleted);
            }
            this.InvokeAsync("PutFile", new object[] {
                        folder,
                        fileName,
                        replicateCount,
                        fileData,
                        overWrite,
                        extraInfo}, this.PutFileOperationCompleted, userState);
        }
        
        private void OnPutFileOperationCompleted(object arg) {
            if ((this.PutFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutFileCompleted(this, new PutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BeginPutFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginPutFileChunk(string folder, string fileName, int replicateCount, bool overWrite, ExtraInfo[] extraInfo) {
            object[] results = this.Invoke("BeginPutFileChunk", new object[] {
                        folder,
                        fileName,
                        replicateCount,
                        overWrite,
                        extraInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginPutFileChunkAsync(string folder, string fileName, int replicateCount, bool overWrite, ExtraInfo[] extraInfo) {
            this.BeginPutFileChunkAsync(folder, fileName, replicateCount, overWrite, extraInfo, null);
        }
        
        /// <remarks/>
        public void BeginPutFileChunkAsync(string folder, string fileName, int replicateCount, bool overWrite, ExtraInfo[] extraInfo, object userState) {
            if ((this.BeginPutFileChunkOperationCompleted == null)) {
                this.BeginPutFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginPutFileChunkOperationCompleted);
            }
            this.InvokeAsync("BeginPutFileChunk", new object[] {
                        folder,
                        fileName,
                        replicateCount,
                        overWrite,
                        extraInfo}, this.BeginPutFileChunkOperationCompleted, userState);
        }
        
        private void OnBeginPutFileChunkOperationCompleted(object arg) {
            if ((this.BeginPutFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginPutFileChunkCompleted(this, new BeginPutFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PutFileChunk(string fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileData) {
            object[] results = this.Invoke("PutFileChunk", new object[] {
                        fileID,
                        fileData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PutFileChunkAsync(string fileID, byte[] fileData) {
            this.PutFileChunkAsync(fileID, fileData, null);
        }
        
        /// <remarks/>
        public void PutFileChunkAsync(string fileID, byte[] fileData, object userState) {
            if ((this.PutFileChunkOperationCompleted == null)) {
                this.PutFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileChunkOperationCompleted);
            }
            this.InvokeAsync("PutFileChunk", new object[] {
                        fileID,
                        fileData}, this.PutFileChunkOperationCompleted, userState);
        }
        
        private void OnPutFileChunkOperationCompleted(object arg) {
            if ((this.PutFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutFileChunkCompleted(this, new PutFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EndPutFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EndPutFileChunk(string fileID) {
            object[] results = this.Invoke("EndPutFileChunk", new object[] {
                        fileID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EndPutFileChunkAsync(string fileID) {
            this.EndPutFileChunkAsync(fileID, null);
        }
        
        /// <remarks/>
        public void EndPutFileChunkAsync(string fileID, object userState) {
            if ((this.EndPutFileChunkOperationCompleted == null)) {
                this.EndPutFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndPutFileChunkOperationCompleted);
            }
            this.InvokeAsync("EndPutFileChunk", new object[] {
                        fileID}, this.EndPutFileChunkOperationCompleted, userState);
        }
        
        private void OnEndPutFileChunkOperationCompleted(object arg) {
            if ((this.EndPutFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndPutFileChunkCompleted(this, new EndPutFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortPutFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbortPutFileChunk(string fileID) {
            this.Invoke("AbortPutFileChunk", new object[] {
                        fileID});
        }
        
        /// <remarks/>
        public void AbortPutFileChunkAsync(string fileID) {
            this.AbortPutFileChunkAsync(fileID, null);
        }
        
        /// <remarks/>
        public void AbortPutFileChunkAsync(string fileID, object userState) {
            if ((this.AbortPutFileChunkOperationCompleted == null)) {
                this.AbortPutFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbortPutFileChunkOperationCompleted);
            }
            this.InvokeAsync("AbortPutFileChunk", new object[] {
                        fileID}, this.AbortPutFileChunkOperationCompleted, userState);
        }
        
        private void OnAbortPutFileChunkOperationCompleted(object arg) {
            if ((this.AbortPutFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AbortPutFileChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFile(string folder, string fileName) {
            object[] results = this.Invoke("GetFile", new object[] {
                        folder,
                        fileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string folder, string fileName) {
            this.GetFileAsync(folder, fileName, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string folder, string fileName, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        folder,
                        fileName}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BeginGetFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginGetFileChunk(string folder, string fileName) {
            object[] results = this.Invoke("BeginGetFileChunk", new object[] {
                        folder,
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginGetFileChunkAsync(string folder, string fileName) {
            this.BeginGetFileChunkAsync(folder, fileName, null);
        }
        
        /// <remarks/>
        public void BeginGetFileChunkAsync(string folder, string fileName, object userState) {
            if ((this.BeginGetFileChunkOperationCompleted == null)) {
                this.BeginGetFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginGetFileChunkOperationCompleted);
            }
            this.InvokeAsync("BeginGetFileChunk", new object[] {
                        folder,
                        fileName}, this.BeginGetFileChunkOperationCompleted, userState);
        }
        
        private void OnBeginGetFileChunkOperationCompleted(object arg) {
            if ((this.BeginGetFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginGetFileChunkCompleted(this, new BeginGetFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileChunk(string fileID, int length) {
            object[] results = this.Invoke("GetFileChunk", new object[] {
                        fileID,
                        length});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileChunkAsync(string fileID, int length) {
            this.GetFileChunkAsync(fileID, length, null);
        }
        
        /// <remarks/>
        public void GetFileChunkAsync(string fileID, int length, object userState) {
            if ((this.GetFileChunkOperationCompleted == null)) {
                this.GetFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileChunkOperationCompleted);
            }
            this.InvokeAsync("GetFileChunk", new object[] {
                        fileID,
                        length}, this.GetFileChunkOperationCompleted, userState);
        }
        
        private void OnGetFileChunkOperationCompleted(object arg) {
            if ((this.GetFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileChunkCompleted(this, new GetFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EndGetFileChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndGetFileChunk(string fileID) {
            this.Invoke("EndGetFileChunk", new object[] {
                        fileID});
        }
        
        /// <remarks/>
        public void EndGetFileChunkAsync(string fileID) {
            this.EndGetFileChunkAsync(fileID, null);
        }
        
        /// <remarks/>
        public void EndGetFileChunkAsync(string fileID, object userState) {
            if ((this.EndGetFileChunkOperationCompleted == null)) {
                this.EndGetFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndGetFileChunkOperationCompleted);
            }
            this.InvokeAsync("EndGetFileChunk", new object[] {
                        fileID}, this.EndGetFileChunkOperationCompleted, userState);
        }
        
        private void OnEndGetFileChunkOperationCompleted(object arg) {
            if ((this.EndGetFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndGetFileChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDirectoryListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDirectoryListing(string folder, DirectoryListOptions listOptions) {
            object[] results = this.Invoke("GetDirectoryListing", new object[] {
                        folder,
                        listOptions});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDirectoryListingAsync(string folder, DirectoryListOptions listOptions) {
            this.GetDirectoryListingAsync(folder, listOptions, null);
        }
        
        /// <remarks/>
        public void GetDirectoryListingAsync(string folder, DirectoryListOptions listOptions, object userState) {
            if ((this.GetDirectoryListingOperationCompleted == null)) {
                this.GetDirectoryListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectoryListingOperationCompleted);
            }
            this.InvokeAsync("GetDirectoryListing", new object[] {
                        folder,
                        listOptions}, this.GetDirectoryListingOperationCompleted, userState);
        }
        
        private void OnGetDirectoryListingOperationCompleted(object arg) {
            if ((this.GetDirectoryListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectoryListingCompleted(this, new GetDirectoryListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileListing", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RemoteFileInfo[] GetFileListing(string folder, DirectoryListOptions listOptions) {
            object[] results = this.Invoke("GetFileListing", new object[] {
                        folder,
                        listOptions});
            return ((RemoteFileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileListingAsync(string folder, DirectoryListOptions listOptions) {
            this.GetFileListingAsync(folder, listOptions, null);
        }
        
        /// <remarks/>
        public void GetFileListingAsync(string folder, DirectoryListOptions listOptions, object userState) {
            if ((this.GetFileListingOperationCompleted == null)) {
                this.GetFileListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileListingOperationCompleted);
            }
            this.InvokeAsync("GetFileListing", new object[] {
                        folder,
                        listOptions}, this.GetFileListingOperationCompleted, userState);
        }
        
        private void OnGetFileListingOperationCompleted(object arg) {
            if ((this.GetFileListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileListingCompleted(this, new GetFileListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class RemoteStorageLocation {
        
        private string pathField;
        
        private string accessModeField;
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string AccessMode {
            get {
                return this.accessModeField;
            }
            set {
                this.accessModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class RemoteFileInfo {
        
        private string folderField;
        
        private string fileNameField;
        
        private string[] remoteLocationsField;
        
        private long lengthField;
        
        private System.DateTime lastWriteTimeField;
        
        private System.DateTime lastModTimeField;
        
        private System.DateTime lastReadTimeField;
        
        private ExtraInfo[] extraInfoField;
        
        /// <remarks/>
        public string Folder {
            get {
                return this.folderField;
            }
            set {
                this.folderField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string[] RemoteLocations {
            get {
                return this.remoteLocationsField;
            }
            set {
                this.remoteLocationsField = value;
            }
        }
        
        /// <remarks/>
        public long Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastWriteTime {
            get {
                return this.lastWriteTimeField;
            }
            set {
                this.lastWriteTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModTime {
            get {
                return this.lastModTimeField;
            }
            set {
                this.lastModTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastReadTime {
            get {
                return this.lastReadTimeField;
            }
            set {
                this.lastReadTimeField = value;
            }
        }
        
        /// <remarks/>
        public ExtraInfo[] ExtraInfo {
            get {
                return this.extraInfoField;
            }
            set {
                this.extraInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ExtraInfo {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DirectoryListOptions {
        
        /// <remarks/>
        AllSubDirectories,
        
        /// <remarks/>
        SelectedFolderOnly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStorageLocationsCompletedEventHandler(object sender, GetStorageLocationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStorageLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateStorageLocationsCompletedEventHandler(object sender, UpdateStorageLocationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStorageLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStorageLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PutFileCompletedEventHandler(object sender, PutFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BeginPutFileChunkCompletedEventHandler(object sender, BeginPutFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginPutFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginPutFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PutFileChunkCompletedEventHandler(object sender, PutFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EndPutFileChunkCompletedEventHandler(object sender, EndPutFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndPutFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndPutFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AbortPutFileChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BeginGetFileChunkCompletedEventHandler(object sender, BeginGetFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginGetFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginGetFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileChunkCompletedEventHandler(object sender, GetFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EndGetFileChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDirectoryListingCompletedEventHandler(object sender, GetDirectoryListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectoryListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirectoryListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileListingCompletedEventHandler(object sender, GetFileListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RemoteFileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RemoteFileInfo[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591