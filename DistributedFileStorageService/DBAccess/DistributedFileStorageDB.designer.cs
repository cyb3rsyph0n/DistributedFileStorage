#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DistributedFileStorageService.DBAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DSFileStorage")]
	public partial class DistributedFileStorageDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFileLocation(FileLocation instance);
    partial void UpdateFileLocation(FileLocation instance);
    partial void DeleteFileLocation(FileLocation instance);
    partial void InsertLogEntry(LogEntry instance);
    partial void UpdateLogEntry(LogEntry instance);
    partial void DeleteLogEntry(LogEntry instance);
    partial void InsertFileMarker(FileMarker instance);
    partial void UpdateFileMarker(FileMarker instance);
    partial void DeleteFileMarker(FileMarker instance);
    #endregion
		
		public DistributedFileStorageDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DistributedFileStorageDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DistributedFileStorageDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DistributedFileStorageDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FileLocation> FileLocations
		{
			get
			{
				return this.GetTable<FileLocation>();
			}
		}
		
		public System.Data.Linq.Table<LogEntry> LogEntries
		{
			get
			{
				return this.GetTable<LogEntry>();
			}
		}
		
		public System.Data.Linq.Table<FileMarker> FileMarkers
		{
			get
			{
				return this.GetTable<FileMarker>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dfsFileLocations")]
	public partial class FileLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LocationID;
		
		private string _FileMarkerID;
		
		private string _Location;
		
		private EntityRef<FileMarker> _FileMarker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(string value);
    partial void OnLocationIDChanged();
    partial void OnFileMarkerIDChanging(string value);
    partial void OnFileMarkerIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public FileLocation()
		{
			this._FileMarker = default(EntityRef<FileMarker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileMarkerID", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string FileMarkerID
		{
			get
			{
				return this._FileMarkerID;
			}
			set
			{
				if ((this._FileMarkerID != value))
				{
					if (this._FileMarker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._FileMarkerID = value;
					this.SendPropertyChanged("FileMarkerID");
					this.OnFileMarkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileMarker_FileLocation", Storage="_FileMarker", ThisKey="FileMarkerID", OtherKey="FileMarkerID", IsForeignKey=true)]
		public FileMarker FileMarker
		{
			get
			{
				return this._FileMarker.Entity;
			}
			set
			{
				FileMarker previousValue = this._FileMarker.Entity;
				if (((previousValue != value) 
							|| (this._FileMarker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileMarker.Entity = null;
						previousValue.FileLocations.Remove(this);
					}
					this._FileMarker.Entity = value;
					if ((value != null))
					{
						value.FileLocations.Add(this);
						this._FileMarkerID = value.FileMarkerID;
					}
					else
					{
						this._FileMarkerID = default(string);
					}
					this.SendPropertyChanged("FileMarker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dfsErrorLog")]
	public partial class LogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RecordID;
		
		private System.DateTime _ErrorDate;
		
		private string _ErrorText;
		
		private string _Exception;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(string value);
    partial void OnRecordIDChanged();
    partial void OnErrorDateChanging(System.DateTime value);
    partial void OnErrorDateChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    #endregion
		
		public LogEntry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorDate", DbType="DateTime NOT NULL")]
		public System.DateTime ErrorDate
		{
			get
			{
				return this._ErrorDate;
			}
			set
			{
				if ((this._ErrorDate != value))
				{
					this.OnErrorDateChanging(value);
					this.SendPropertyChanging();
					this._ErrorDate = value;
					this.SendPropertyChanged("ErrorDate");
					this.OnErrorDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dfsFileMarkers")]
	public partial class FileMarker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileMarkerID;
		
		private string _Folder;
		
		private string _FileName;
		
		private long _Length;
		
		private System.DateTime _LastWriteTime;
		
		private System.DateTime _LastReadTime;
		
		private System.DateTime _LastModTime;
		
		private string _Hash;
		
		private System.Data.Linq.Binary _ExtraInfo;
		
		private EntitySet<FileLocation> _FileLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileMarkerIDChanging(string value);
    partial void OnFileMarkerIDChanged();
    partial void OnFolderChanging(string value);
    partial void OnFolderChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLengthChanging(long value);
    partial void OnLengthChanged();
    partial void OnLastWriteTimeChanging(System.DateTime value);
    partial void OnLastWriteTimeChanged();
    partial void OnLastReadTimeChanging(System.DateTime value);
    partial void OnLastReadTimeChanged();
    partial void OnLastModTimeChanging(System.DateTime value);
    partial void OnLastModTimeChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnExtraInfoChanging(System.Data.Linq.Binary value);
    partial void OnExtraInfoChanged();
    #endregion
		
		public FileMarker()
		{
			this._FileLocations = new EntitySet<FileLocation>(new Action<FileLocation>(this.attach_FileLocations), new Action<FileLocation>(this.detach_FileLocations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileMarkerID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FileMarkerID
		{
			get
			{
				return this._FileMarkerID;
			}
			set
			{
				if ((this._FileMarkerID != value))
				{
					this.OnFileMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._FileMarkerID = value;
					this.SendPropertyChanged("FileMarkerID");
					this.OnFileMarkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Folder", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Folder
		{
			get
			{
				return this._Folder;
			}
			set
			{
				if ((this._Folder != value))
				{
					this.OnFolderChanging(value);
					this.SendPropertyChanging();
					this._Folder = value;
					this.SendPropertyChanged("Folder");
					this.OnFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="BigInt NOT NULL")]
		public long Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWriteTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastWriteTime
		{
			get
			{
				return this._LastWriteTime;
			}
			set
			{
				if ((this._LastWriteTime != value))
				{
					this.OnLastWriteTimeChanging(value);
					this.SendPropertyChanging();
					this._LastWriteTime = value;
					this.SendPropertyChanged("LastWriteTime");
					this.OnLastWriteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastReadTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastReadTime
		{
			get
			{
				return this._LastReadTime;
			}
			set
			{
				if ((this._LastReadTime != value))
				{
					this.OnLastReadTimeChanging(value);
					this.SendPropertyChanging();
					this._LastReadTime = value;
					this.SendPropertyChanged("LastReadTime");
					this.OnLastReadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModTime
		{
			get
			{
				return this._LastModTime;
			}
			set
			{
				if ((this._LastModTime != value))
				{
					this.OnLastModTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModTime = value;
					this.SendPropertyChanged("LastModTime");
					this.OnLastModTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraInfo", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ExtraInfo
		{
			get
			{
				return this._ExtraInfo;
			}
			set
			{
				if ((this._ExtraInfo != value))
				{
					this.OnExtraInfoChanging(value);
					this.SendPropertyChanging();
					this._ExtraInfo = value;
					this.SendPropertyChanged("ExtraInfo");
					this.OnExtraInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileMarker_FileLocation", Storage="_FileLocations", ThisKey="FileMarkerID", OtherKey="FileMarkerID")]
		public EntitySet<FileLocation> FileLocations
		{
			get
			{
				return this._FileLocations;
			}
			set
			{
				this._FileLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileLocations(FileLocation entity)
		{
			this.SendPropertyChanging();
			entity.FileMarker = this;
		}
		
		private void detach_FileLocations(FileLocation entity)
		{
			this.SendPropertyChanging();
			entity.FileMarker = null;
		}
	}
}
#pragma warning restore 1591
